bool Init_DOG_Master_SM(uint8_t Priority)
{
	// state is unpared
	// post entry event to self
	// set priority
}

bool Post_DOG_Master_SM(ES_Event ThisEvent)
{
	// post event
}

ES_Event DOG_FARMER_MASTER_SM(ES_Event ThisEvent)
{
	// set return event
	// next state is current state
	// loop through states
		// if current state is unpaired
			// if event is entry
				// stop electromechanical indicator
				// clear LED active
				// call LED setter
				// turn thrust fan off
				// set all brakes inactive
				// call brake setter
				// turn lift fan off
			// else if the event is broadcast detected
				// set request pair in FARMER_TX_SM
				// set farmer address in TX and RX
				// next state is Wait2Pair
		// else if current state is Wait2Pair
			// else if event is Lost connection
				// next state is Unpaired
				// post entry event to self
			// else if event is pair successful
				// set LED active
				// Call LED setter
				// turn on electromechanical indicator
				// set paired in TX and RX
				// next state is Paired
		// else if state is paired
			// if event is thrust
				// determine thrust setting and direction
				// set direction on thrust fan
				// set thrust value on thrust fan
			// else if event is start lift fan
				// set lift fan active
				// call PIC commander
			// else if event is stop lift fan
				// set lift fan inactive
				// call PIC commander
			// else if event is brake
				// set brakes active
				// call brake setter
			// else if event reset brakes
				// set brakes inactive
				// call brake setter
			// else if event is turn right
				// set right brake active
				// call brake setter
			// else if event is reset right
				// set right brake inactive
				// call brake setter
			// else if event is turn left
				// set left brake active
				// call brake setter
			// else if event is reset left
				// set left brake inactive
				// call brake setter
			// else if event is blinker timeout
				// update LED pattern
				// call LED setter
				// set blink timer
			// else if event is lost connection
				// set unpaired in TX and RX
				// post entry event to self
				// next state is unpaired
}

static void LED_Setter(void)
{	
	// if LED inactive
		// light Red LEDs
	// else if LED active
		//light LED according to current pattern selection
}

static void Brake_Setter(void)
{
	// if Brake active
		// set left and right brakes down
	// else if Brake inactive
		// if right brake active
			// set right brake down
		// else if right brake inactive
			// raise right brake
		// if left brake active
			// set left brake down
		// else if left brake inactive
			//raise left brake
}

static void PIC_Commander(void)
{
	// insert PIC UART communication code
}