{\rtf1\ansi\uc0 \deff1{\fonttbl{\f1\fmodern\fprq1\fcharset0 Courier New;}}{\colortbl;\red255\green255\blue255;\red51\green00\blue102;\red24\green97\blue167;\red50\green186\blue06;\red00\green102\blue51;\red00\green102\blue51;\red166\green23\blue97;\red83\green116\blue176;\red102\green51\blue00;\red154\green154\blue154;\red85\green85\blue85;\red166\green23\blue97;\red255\green48\blue48;\red244\green140\blue35;\red00\green00\blue255;\red209\green28\blue237;}
\paperw11905\paperh16837\margl1134\margr1134\margt1134\margb1134\sectd\plain\f1\fs20
\pard \cbpat1{{\cf2{}}{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Module}}}\par\pard
\cbpat1{{\cf6{   FarmerMasterSM.c}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Revision}}}\par\pard
\cbpat1{{\cf6{   {1}.{0}.{1}}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{   The receiving state machine for the Farmer}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ History}}}\par\pard
\cbpat1{{\cf6{ When           Who     What/Why}}}\par\pard
\cbpat1{{\cf6{ -------------- ---     --------}}}\par\pard
\cbpat1{{\cf6{ {0}{5}/{2}{0}/{1}{7} {1}:{5}{1}	bag			created for the project}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf6{/*----------------------------- Include Files -----------------------------*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf6{/* include header files for this state machine as well as any machines at the}}}\par\pard
\cbpat1{{\cf6{   next lower level in the hierarchy that are sub-machines to this machine}}}\par\pard
\cbpat1{{\cf6{*/}}{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf8{#include}} {\cf9{"ES_Configure.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"ES_Framework.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"FarmerMasterSM.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"FarmerTXSM.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"FarmerRXSM.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"Constants.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"LEDBlinkSM.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"Hardware.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf8{#include}} {\cf9{"inc/hw_memmap.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_types.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_gpio.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_nvic.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_uart.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_sysctl.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"driverlib/sysctl.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"driverlib/pin_map.h"}}{\cf8{}}	{\cf5{// Define PART_TM{4}C{1}{2}{3}GH{6}PM in project}}}\par\pard
\cbpat1{{\cf8{}}{\cf2{}}{\cf8{#include}} {\cf9{"driverlib/gpio.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"driverlib/uart.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/*---------------------------- Module Functions ---------------------------*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf6{/* prototypes for private functions for this machine.They should be functions}}}\par\pard
\cbpat1{{\cf6{   relevant to the behavior of this state machine }}}\par\pard
\cbpat1{{\cf6{*/}}{\cf2{}}   }\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{ProcessPairAck}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{ProcessEncrReset}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{ProcessStatus}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{LED_Setter}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf6{/*---------------------------- Module Variables ---------------------------*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf5{// everybody needs a state variable, you may need others as well.}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// type of state variable should match htat of enum in header file}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{static}} {\cf2{FarmerMasterState_t CurrentState}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{MyPriority}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{DogSelect}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf8{#define DOGTAG {1}{0}{1}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf6{/*------------------------------ Module Code ------------------------------*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{     InitFarmerMasterSM}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{     uint{8}_t : the priorty of this service}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{     bool, false if error in initialization, true otherwise}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{     Saves away the priority, sets up the initial transition and does any}}}\par\pard
\cbpat1{{\cf6{     other required initialization for this state machine}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Author}}}\par\pard
\cbpat1{{\cf6{     Matthew W Miller, {5}/{1}{3}/{2}{0}{1}{7}, {1}{7}:{3}{1}}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf14{bool}} {\cf2{}}{\cf16{InitFarmerMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{uint{8}_t}} {\cf2{Priority}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{// state is unpaired}}}\par\pard
\cbpat1{{\cf2{	CurrentState}} {\cf11{=}} {\cf2{Unpaired}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{// post entry event to self}}}\par\pard
\cbpat1{{\cf2{	ES_Event EntryEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{	EntryEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_ENTRY}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{// set priority}}}\par\pard
\cbpat1{{\cf2{	MyPriority}} {\cf11{=}} {\cf2{Priority}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf13{if}} {\cf2{}}{\cf11{(}}{\cf2{}}{\cf16{PostFarmerMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{EntryEvent}}{\cf11{))}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{return true}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{else}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{return false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{     PostFarmerMasterSM}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{     EF_Event ThisEvent , the event to post to the queue}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{     boolean False if the Enqueue operation failed, True otherwise}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{     Posts an event to this state machine's queue}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Author}}}\par\pard
\cbpat1{{\cf6{     J. Edward Carryer, {1}{0}/{2}{3}/{1}{1}, {1}{9}:{2}{5}}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf14{bool}} {\cf2{}}{\cf16{PostFarmerMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{ES_Event ThisEvent}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{// post event}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{return}} {\cf2{}}{\cf16{ES_PostToService}}{\cf2{}}{\cf11{(}}{\cf2{MyPriority}}{\cf11{,}} {\cf2{ThisEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{    RunFarmerMasterSM}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{   ES_Event : the event to process}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{   ES_Event, ES_NO_EVENT if no error ES_ERROR otherwise}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{   add your description here}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{   uses nested switch/case to implement the machine.}}}\par\pard
\cbpat1{{\cf6{ Author}}}\par\pard
\cbpat1{{\cf6{   Matthew Miller, {0}{5}/{1}{3}/{1}{7}, {1}{7}:{5}{4}}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}\par\pard
\cbpat1{ES_Event}} {\cf16{RunFarmerMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{ES_Event ThisEvent}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{	ES_Event ReturnEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{	FarmerMasterState_t NextState}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{// set return event}}}\par\pard
\cbpat1{{\cf2{	ReturnEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_NO_EVENT}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{// next state is current state}}}\par\pard
\cbpat1{{\cf2{	NextState}} {\cf11{=}} {\cf2{CurrentState}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{// switch through states}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{switch}}{\cf2{}}{\cf11{(}}{\cf2{CurrentState}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{// if current state is unpaired}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{case}} {\cf2{Unpaired}}{\cf11{:}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// if event is entry}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_ENTRY}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//printf("FarmerMasterSM -- Unpaired -- ENTRY_EVENT\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// set the LED blink timer}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// set blinker}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// call LED function}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// else if event is timeout}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{((}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_TIMEOUT}} {\cf11{&&}} {\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventParam}} {\cf11{==}} {\cf2{CONN_TIMER}}{\cf11{))}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// post entry event to self}}}\par\pard
\cbpat1{{\cf2{				ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_ENTRY}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostFarmerMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// else if event is right button down}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_R_BUTTON_DOWN}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// increment the DOG selector}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//TODO:This gives {0},{1},{2}, but we want {1},{2},{3} FIX LATER}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("Dog Selection Button Pressed\\r\\n");}}}\par\pard
\cbpat1{{\cf2{				DogSelect}} {\cf11{= (}}{\cf2{DogSelect}}{\cf11{+}}{\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{)%}}{\cf2{}}{\cf4{{3}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Tell the LED service to switch the LED to blink}}}\par\pard
\cbpat1{{\cf2{				ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_INCREMENT_LED}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostLEDBlinkSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// else if the event is speech detected}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_SPEECH_DETECTED}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//printf("FarmerMasterSM -- Unpaired -- SPEECH_DETECTED\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// set request pair in FARMER_TX_SM with DOG}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{setFarmerDataHeader}}{\cf2{}}{\cf11{(}}{\cf2{REQ_{2}_PAIR}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// set DogTag in FarmerTXSM}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf6{/*******************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{				{\cf5{//PICK THE DOG TO PAIR WITH}}}\par\pard
\cbpat1{{\cf2{}}				{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{DogSelect}} {\cf11{==}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}				{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"FarmerMasterSM -- SENDING REQ{2}PAIR to DOG {1}}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{setDogTag}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}				{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{DogSelect}} {\cf11{==}} {\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}				{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"FarmerMasterSM -- SENDING REQ{2}PAIR to DOG {2}}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{setDogTag}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf4{{2}}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}				{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{DogSelect}} {\cf11{==}} {\cf2{}}{\cf4{{2}}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}				{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"FarmerMasterSM -- SENDING REQ{2}PAIR to DOG {3}}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{setDogTag}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf4{{3}}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}				{\cf13{else}}}\par\pard
\cbpat1{{\cf2{}}				{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"FarmerMasterSM --  UNRECOGNIZED DOGTAG}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//setDogTag(DogSelect);}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// Set destination address to BROADCAST since we are trying to talk to everybody}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{setDestDogAddress}}{\cf2{}}{\cf11{(}}{\cf2{BROADCAST}}{\cf11{,}}{\cf2{BROADCAST}}{\cf11{);}} {\cf2{}}{\cf5{//TODO: replace this with our xbee address so we dont piss off other teams}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{// next state is Wait{2}Pair}}}\par\pard
\cbpat1{{\cf2{				NextState}} {\cf11{=}} {\cf2{Wait{2}Pair}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// post entry event to self}}}\par\pard
\cbpat1{{\cf2{				ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_ENTRY}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostFarmerMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Post ES_SEND_MESSAGE to FarmerTX}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_SEND_RESPONSE}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostFarmerTXSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//start {1}s connection timer}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{ES_Timer_InitTimer}}{\cf2{}}{\cf11{(}}{\cf2{CONN_TIMER}}{\cf11{,}} {\cf2{CONNECTION_TIME}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{break}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{// else if current state is Wait{2}Pair}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{case}} {\cf2{Wait{2}Pair}}{\cf11{:}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// if event is entry}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_ENTRY}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("FarmerMasterSM -- Wait{2}Pair -- ENTRY\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// set the LED blink timer}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// toggle the Blink LED}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// else if event is timeout}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_TIMEOUT}} {\cf11{&&}} {\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventParam}} {\cf11{==}} {\cf2{LED_TIMER}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// post entry event to self}}}\par\pard
\cbpat1{{\cf2{				ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_ENTRY}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostFarmerMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// else if event is Lost connection}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_LOST_CONNECTION}} {\cf11{|| (}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_TIMEOUT}} {\cf11{&&}} {\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventParam}} {\cf11{==}} {\cf2{CONN_TIMER}}{\cf11{))}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("FarmerMasterSM -- Wait{2}Pair -- LOST_CONNECTION\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// next state is Unpaired}}}\par\pard
\cbpat1{{\cf2{				NextState}} {\cf11{=}} {\cf2{Unpaired}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// post entry event to self}}}\par\pard
\cbpat1{{\cf2{				ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_ENTRY}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostFarmerMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//let the FarmerRXSM know we have lost connection}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_LOST_CONNECTION}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostFarmerRXSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// else if we receive a PAIR_ACK}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{((}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_MESSAGE_REC}}{\cf11{) && (}}{\cf2{}}{\cf16{getHeader}}{\cf2{}}{\cf11{() ==}} {\cf2{PAIR_ACK}}{\cf11{))}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("FarmerMasterSM -- Wait{2}Pair -- PAIR_ACK RECEIVEDL\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("FarmerMasterSM -- Wait{2}Pair -- MESSAGE RECEIVED -- HEADER = %i \\r\\n",getHeader());}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{				{\cf16{ProcessPairAck}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("FarmerMasterSM -- Wait{2}Pair -- SENDING_ENCRYPTION\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Post ES_SEND_RESPONSE to FarmerTXSM}}}\par\pard
\cbpat1{{\cf2{				ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_SEND_RESPONSE}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostFarmerTXSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf6{/*}}}\par\pard
\cbpat1{{\cf6{				// Next state is Wait{2}Encrypt}}}\par\pard
\cbpat1{{\cf6{				NextState = Wait{2}Encrypt;}}}\par\pard
\cbpat1{{\cf6{				//printf("FarmerMasterSM -- Wait{2}Pair -- MOVING TO Wait{2}Encrypt\\r\\n");}}}\par\pard
\cbpat1{{\cf6{				*/}}{\cf2{}\par\pard
\cbpat1{				}\par\pard
\cbpat1{				NextState}} {\cf11{=}} {\cf2{Paired}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{				}\par\pard
\cbpat1{				{\cf5{//Set the LED solid}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_PAIR_SUCCESSFUL}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostLEDBlinkSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//turn on sound}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{HWREG}}{\cf2{}}{\cf11{(}}{\cf2{GPIO_PORTD_BASE}} {\cf11{+ (}}{\cf2{ALL_BITS}} {\cf11{+}} {\cf2{GPIO_O_DATA}}{\cf11{)) |= (}}{\cf2{SPEAKER_PIN_D}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//start {3}{0}{0}ms message timer}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{ES_Timer_InitTimer}}{\cf2{}}{\cf11{(}}{\cf2{TRANS_TIMER}}{\cf11{,}} {\cf2{TRANSMISSION_RATE}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//restart {1}s connection timer}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{ES_Timer_InitTimer}}{\cf2{}}{\cf11{(}}{\cf2{CONN_TIMER}}{\cf11{,}} {\cf2{CONNECTION_TIME}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{break}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}		}\par\pard
\cbpat1{			}\par\pard
\cbpat1{		{\cf5{// else if state is paired}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{case}} {\cf2{Paired}}{\cf11{:}}}\par\pard
\cbpat1{{\cf2{}}			}\par\pard
\cbpat1{			{\cf13{if}}{\cf2{}}{\cf11{((}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_MESSAGE_REC}}{\cf11{) && (}}{\cf2{}}{\cf16{getHeader}}{\cf2{}}{\cf11{() ==}} {\cf2{STATUS}}{\cf11{) && (}}{\cf2{}}{\cf16{getDogAddrMSB}}{\cf2{}}{\cf11{() ==}} {\cf2{}}{\cf16{getDestAddrMSB}}{\cf2{}}{\cf11{()) && (}}{\cf2{}}{\cf16{getDogAddrLSB}}{\cf2{}}{\cf11{() ==}} {\cf2{}}{\cf16{getDestAddrLSB}}{\cf2{}}{\cf11{()))}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//handle the status message}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("FarmerMasterSM -- Paired -- Status Received\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{ProcessStatus}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//restart the {1}s connection timer}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{ES_Timer_InitTimer}}{\cf2{}}{\cf11{(}}{\cf2{CONN_TIMER}}{\cf11{,}} {\cf2{CONNECTION_TIME}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			}\par\pard
\cbpat1{			{\cf13{else if}}{\cf2{}}{\cf11{((}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_MESSAGE_REC}}{\cf11{) && (}}{\cf2{}}{\cf16{getHeader}}{\cf2{}}{\cf11{() ==}} {\cf2{ENCR_RESET}}{\cf11{) && (}}{\cf2{}}{\cf16{getDogAddrMSB}}{\cf2{}}{\cf11{() ==}} {\cf2{}}{\cf16{getDestAddrMSB}}{\cf2{}}{\cf11{()) && (}}{\cf2{}}{\cf16{getDogAddrLSB}}{\cf2{}}{\cf11{() ==}} {\cf2{}}{\cf16{getDestAddrLSB}}{\cf2{}}{\cf11{()))}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//handle the status message}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("FarmerMasterSM -- Paired -- Encr Reset Received\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{ProcessEncrReset}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//restart the {1}s connection timer}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{ES_Timer_InitTimer}}{\cf2{}}{\cf11{(}}{\cf2{CONN_TIMER}}{\cf11{,}} {\cf2{CONNECTION_TIME}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			}\par\pard
\cbpat1{			{\cf5{//if the transmit timer times out}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{((}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_TIMEOUT}}{\cf11{) && (}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventParam}} {\cf11{==}} {\cf2{TRANS_TIMER}}{\cf11{))}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//header should already be set to a CTRL message I think}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{setFarmerDataHeader}}{\cf2{}}{\cf11{(}}{\cf2{CTRL}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Post a send message event to FarmerTXSM}}}\par\pard
\cbpat1{{\cf2{				ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_SEND_RESPONSE}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostFarmerTXSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Restart {3}{0}{0}ms message timer}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{ES_Timer_InitTimer}}{\cf2{}}{\cf11{(}}{\cf2{TRANS_TIMER}}{\cf11{,}} {\cf2{TRANSMISSION_RATE}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			}\par\pard
\cbpat1{			{\cf5{// if event is right button down}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_R_BUTTON_DOWN}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// set right brake active in TX}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("Right Brake Engaged\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{EnableRightBrake}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// else if event is right button up}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_R_BUTTON_UP}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// set right brake inactive in TX}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("Right Brake Disengaged\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{DisableRightBrake}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// else if event is left button down}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_L_BUTTON_DOWN}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// set left brake active in TX}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("Left Brake Engaged\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{EnableLeftBrake}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// else if event is left button up}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}} {\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_L_BUTTON_UP}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// set left brake inactive in TX}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{DisableLeftBrake}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("Left Brake Disengaged\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// else if event is reverse button down}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_REV_BUTTON_DOWN}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// set reverse active in TX}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("Reverse Button Engaged\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{EnableReverse}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// else if event is reverse button up}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_REV_BUTTON_UP}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// set forward active in TX}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("Reverse Button Disengaged\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{DisableReverse}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// else if event is peripheral button down}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_P_BUTTON_DOWN}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// toggle peripheral in tx}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("Peripheral Button Engaged\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{TogglePeripheral}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}			}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// else if event is lost connection}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{((}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_LOST_CONNECTION}}{\cf11{) || ((}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_TIMEOUT}}{\cf11{) && (}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventParam}} {\cf11{==}} {\cf2{CONN_TIMER}}{\cf11{)))}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("FarmerMasterSM -- Paired -- LOST_CONNECTIONr\\n");}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{				{\cf5{// post entry event to self}}}\par\pard
\cbpat1{{\cf2{				ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_ENTRY}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostFarmerMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// next state is unpaired}}}\par\pard
\cbpat1{{\cf2{				NextState}} {\cf11{=}} {\cf2{Unpaired}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//reset all of the control variables for the next pairing}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{clearControls}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//turn off vibration motors}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{SetDutyLeftVibrationMotor}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{SetDutyRightVibrationMotor}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//let the FarmerRXSM know we have lost connection}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_LOST_CONNECTION}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostFarmerRXSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//let the blinker know we have lost connection}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostLEDBlinkSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//turn off sound}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{HWREG}}{\cf2{}}{\cf11{(}}{\cf2{GPIO_PORTD_BASE}} {\cf11{+ (}}{\cf2{ALL_BITS}} {\cf11{+}} {\cf2{GPIO_O_DATA}}{\cf11{)) &= ~(}}{\cf2{SPEAKER_PIN_D}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{break}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}} {\cf2{}}{\cf5{//end switch	}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Set current state to next state}}}\par\pard
\cbpat1{{\cf2{	CurrentState}} {\cf11{=}} {\cf2{NextState}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//return return event}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{return}} {\cf2{ReturnEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}		}\par\pard
\cbpat1{{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{//Sequence of responses when we receive a PAIR_ACK}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{ProcessPairAck}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Set the data header to be an ENCR_KEY to prepare to send an encryption key}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{setFarmerDataHeader}}{\cf2{}}{\cf11{(}}{\cf2{ENCR_KEY}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{setDestDogAddress}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf16{getDogAddrMSB}}{\cf2{}}{\cf11{(),}} {\cf2{}}{\cf16{getDogAddrLSB}}{\cf2{}}{\cf11{());}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//printf("FarmerMasterSM -- Process Pair Ack -- Dog to Pair with: %i   %i  \\r\\n", getDogAddrMSB(),getDogAddrLSB());}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{ProcessEncrReset}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{resetEncryptionIndex}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//printf("FarmerMasterSM -- Process Encr Reset -- Encryption Index reset to: %i  \\r\\n", getEncryptionKeyIndex());}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{ProcessStatus}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{setFarmerDataHeader}}{\cf2{}}{\cf11{(}}{\cf2{CTRL}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//local variable GyroZ_MSB}}}\par\pard
\cbpat1{{\cf2{}}	{\cf14{uint{8}_t}} {\cf2{GyroZ_MSB}} {\cf11{=}} {\cf2{}}{\cf16{getGyroZ_MSB}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}	{\cf14{uint{8}_t}} {\cf2{vibration_duty}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{GyroZ_MSB}} {\cf11{>=}} {\cf2{}}{\cf4{{1}{2}{7}}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{		vibration_duty}} {\cf11{= ((}}{\cf2{GyroZ_MSB}}{\cf11{-}}{\cf2{}}{\cf4{{1}{2}{7}}}{\cf2{}}{\cf11{)*}}{\cf2{}}{\cf4{{1}{0}{0}}}{\cf2{}}{\cf11{)/}}{\cf2{}}{\cf4{{1}{2}{8}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//printf("RIGHT VIBRATION MOTOR DUTY = %i\\r\\n", vibration_duty);}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{SetDutyRightVibrationMotor}}{\cf2{}}{\cf11{(}}{\cf2{vibration_duty}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{SetDutyLeftVibrationMotor}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{GyroZ_MSB}} {\cf11{<}} {\cf2{}}{\cf4{{1}{2}{7}}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{		vibration_duty}} {\cf11{= ((}}{\cf2{}}{\cf4{{1}{2}{6}}}{\cf2{}}{\cf11{-}}{\cf2{GyroZ_MSB}}{\cf11{)*}}{\cf2{}}{\cf4{{1}{0}{0}}}{\cf2{}}{\cf11{)/}}{\cf2{}}{\cf4{{1}{2}{6}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//printf("LEFT VIBRATION MOTOR DUTY = %i\\r\\n", vibration_duty);}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{SetDutyLeftVibrationMotor}}{\cf2{}}{\cf11{(}}{\cf2{vibration_duty}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{SetDutyRightVibrationMotor}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/***************************************************************************}}}\par\pard
\cbpat1{{\cf6{ private functions}}}\par\pard
\cbpat1{{\cf6{ ***************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf14{uint{8}_t}} {\cf2{}}{\cf16{getDogSelect}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{return}} {\cf2{DogSelect}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}}
