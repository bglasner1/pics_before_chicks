{\rtf1\ansi\uc0 \deff1{\fonttbl{\f1\fmodern\fprq1\fcharset0 Courier New;}}{\colortbl;\red255\green255\blue255;\red51\green00\blue102;\red24\green97\blue167;\red50\green186\blue06;\red00\green102\blue51;\red00\green102\blue51;\red166\green23\blue97;\red83\green116\blue176;\red102\green51\blue00;\red154\green154\blue154;\red85\green85\blue85;\red166\green23\blue97;\red255\green48\blue48;\red244\green140\blue35;\red00\green00\blue255;\red209\green28\blue237;}
\paperw11905\paperh16837\margl1134\margr1134\margt1134\margb1134\sectd\plain\f1\fs20
\pard \cbpat1{{\cf2{}}{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Module}}}\par\pard
\cbpat1{{\cf6{   Farmer_TX_SM.c}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Revision}}}\par\pard
\cbpat1{{\cf6{   {1}.{0}.{1}}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{   The receiving state machine for the Farmer}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ History}}}\par\pard
\cbpat1{{\cf6{ When           Who     What/Why}}}\par\pard
\cbpat1{{\cf6{ -------------- ---     --------}}}\par\pard
\cbpat1{{\cf6{ {0}{5}/{1}{3}/{1}{7} {5}:{2}{9}	mwm			created for the project}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf6{/*----------------------------- Include Files -----------------------------*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf6{/* include header files for this state machine as well as any machines at the}}}\par\pard
\cbpat1{{\cf6{   next lower level in the hierarchy that are sub-machines to this machine}}}\par\pard
\cbpat1{{\cf6{*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf8{#include}} {\cf9{"ES_Configure.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"ES_Framework.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"FarmerTXSM.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"Constants.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"I{2}C_Service.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf8{#include}} {\cf9{"inc/hw_memmap.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_types.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_gpio.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_nvic.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_uart.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_sysctl.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"driverlib/sysctl.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"driverlib/pin_map.h"}}{\cf8{}}	{\cf5{// Define PART_TM{4}C{1}{2}{3}GH{6}PM in project}}}\par\pard
\cbpat1{{\cf8{}}{\cf2{}}{\cf8{#include}} {\cf9{"driverlib/gpio.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"driverlib/uart.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/*----------------------------- Module Defines ----------------------------*/}}{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf6{/*---------------------------- Module Functions ---------------------------*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf6{/* prototypes for private functions for this machine.They should be functions}}}\par\pard
\cbpat1{{\cf6{   relevant to the behavior of this state machine}}}\par\pard
\cbpat1{{\cf6{*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{MessageTransmitted}}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{ClearMessageArray}}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{GenCheckSum}}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{BuildPacket}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{uint{8}_t}} {\cf2{packetType}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{BuildPreamble}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{BuildReq{2}PairPacket}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{BuildEncrKeyPacket}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{BuildCtrlPacket}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{generateEncryptionKey}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{calculateChecksum}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}} {\cf2{}}{\cf5{//probably don't need this since GenCheckSum exists}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{setDriveCtrl}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{setSteeringCtrl}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{setDigitalCtrl}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/*---------------------------- Module Variables ---------------------------*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf5{// everybody needs a state variable, you may need others as well.}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// type of state variable should match that of enum in header file}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static}} {\cf2{FarmerTX_State_t CurrentState}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// with the introduction of Gen{2}, we need a module level Priority var as well}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{MyPriority}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{MessIndex}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{BytesRemaining}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{DogTag}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{DriveCtrl}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{SteeringCtrl}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{DigitalCtrl}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{DataHeader}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{DestAddrMSB}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{DestAddrLSB}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{PacketLength}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{DataLength}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{DataIndex}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{Checksum}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static bool}}	{\cf2{TransEnable}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static bool}} {\cf2{ReverseActive}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static bool}} {\cf2{LeftBrakeActive}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static bool}} {\cf2{RightBrakeActive}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static bool}} {\cf2{PeripheralToggled}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf14{static uint{8}_t}} {\cf2{Message}}{\cf11{[}}{\cf2{TX_MESSAGE_LENGTH}}{\cf11{] = \{}}{\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{\};}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{EncryptionKey}}{\cf11{[}}{\cf2{}}{\cf4{{3}{2}}}{\cf2{}}{\cf11{];}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{EncryptionKeyIndex}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf6{/*------------------------------ Module Code ------------------------------*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{     InitFarmerTXSM}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{     uint{8}_t : the priorty of this service}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{     bool, false if error in initialization, true otherwise}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{     Saves away the priority, sets up the initial transition and does any}}}\par\pard
\cbpat1{{\cf6{     other required initialization for this state machine}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Author}}}\par\pard
\cbpat1{{\cf6{     Matthew W Miller, {5}/{1}{3}/{2}{0}{1}{7}, {1}{7}:{3}{1}}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf14{bool}} {\cf2{}}{\cf16{InitFarmerTXSM}} {\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{uint{8}_t}} {\cf2{Priority}} {\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{  ES_Event ThisEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}\par\pard
\cbpat1{  MyPriority}} {\cf11{=}} {\cf2{Priority}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}  {\cf5{// put us into the first state}}}\par\pard
\cbpat1{{\cf2{  CurrentState}} {\cf11{=}} {\cf2{Waiting{2}Transmit}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf5{//Start TransmitTimer for {2}{0}{0} ms}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{//	ES_Timer_InitTimer(TRANS_TIMER, TRANSMISSION_RATE);}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Set Trans_Enable to false}}}\par\pard
\cbpat1{{\cf2{	TransEnable}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}} {\cf2{}}{\cf5{//disable transmission at startup}}}\par\pard
\cbpat1{{\cf2{	ReverseActive}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}} {\cf2{}}{\cf5{// disable reverse at startup}}}\par\pard
\cbpat1{{\cf2{	LeftBrakeActive}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}} {\cf2{}}{\cf5{// disable right brake at startup}}}\par\pard
\cbpat1{{\cf2{	RightBrakeActive}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}} {\cf2{}}{\cf5{// disable left brake at startup}}}\par\pard
\cbpat1{{\cf2{	PeripheralToggled}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}} {\cf2{}}{\cf5{// disable peripheral function at startup}}}\par\pard
\cbpat1{{\cf2{	DriveCtrl}} {\cf11{=}} {\cf2{IDLE}}{\cf11{;}} {\cf2{}}{\cf5{// zero thrust fan effort at startup}}}\par\pard
\cbpat1{{\cf2{	SteeringCtrl}} {\cf11{=}} {\cf2{STRAIGHT}}{\cf11{;}} {\cf2{}}{\cf5{//no brakes enabled at startup}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{}\par\pard
\cbpat1{	}\par\pard
\cbpat1{  {\cf13{if}} {\cf2{}}{\cf11{(}}{\cf2{}}{\cf16{ES_PostToService}}{\cf2{}}{\cf11{(}} {\cf2{MyPriority}}{\cf11{,}} {\cf2{ThisEvent}}{\cf11{) ==}} {\cf2{}}{\cf13{true}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}  {\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}      {\cf13{return true}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}  {\cf11{\}}}{\cf2{}}{\cf13{else}}}\par\pard
\cbpat1{{\cf2{}}  {\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}      {\cf13{return false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}  {\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{     PostFarmerTXSM}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{     EF_Event ThisEvent , the event to post to the queue}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{     boolean False if the Enqueue operation failed, True otherwise}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{     Posts an event to this state machine's queue}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Author}}}\par\pard
\cbpat1{{\cf6{     J. Edward Carryer, {1}{0}/{2}{3}/{1}{1}, {1}{9}:{2}{5}}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf14{bool}} {\cf2{}}{\cf16{PostFarmerTXSM}}{\cf2{}}{\cf11{(}} {\cf2{ES_Event ThisEvent}} {\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}  {\cf13{return}} {\cf2{}}{\cf16{ES_PostToService}}{\cf2{}}{\cf11{(}} {\cf2{MyPriority}}{\cf11{,}} {\cf2{ThisEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{    RunFarmerTXSM}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{   ES_Event : the event to process}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{   ES_Event, ES_NO_EVENT if no error ES_ERROR otherwise}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{   add your description here}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{   uses nested switch/case to implement the machine.}}}\par\pard
\cbpat1{{\cf6{ Author}}}\par\pard
\cbpat1{{\cf6{   Matthew Miller, {0}{5}/{1}{3}/{1}{7}, {1}{7}:{5}{4}}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}\par\pard
\cbpat1{ES_Event}} {\cf16{RunFarmerTXSM}}{\cf2{}}{\cf11{(}} {\cf2{ES_Event ThisEvent}} {\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{  ES_Event ReturnEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{  ReturnEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_NO_EVENT}}{\cf11{;}} {\cf2{}}{\cf5{// assume no errors}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{  {\cf13{switch}} {\cf2{}}{\cf11{(}} {\cf2{CurrentState}} {\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}  {\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Case Waiting{2}Transmit}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{case}} {\cf2{Waiting{2}Transmit}} {\cf11{:}}	}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//If ThisEvent is ES_TIMEOUT and Transmit is enabled}}}\par\pard
\cbpat1{{\cf2{}}		}\par\pard
\cbpat1{			{\cf6{/*************************************************************************************************}}}\par\pard
\cbpat1{{\cf6{			//if((ThisEvent.EventType == ES_TIMEOUT) && (ThisEvent.EventParam == TRANS_TIMER) && TransEnable)}}}\par\pard
\cbpat1{{\cf6{		******************************************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{		}\par\pard
\cbpat1{			{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_SEND_RESPONSE}}{\cf11{)}}	}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("Farmer TX SM -- Waiting{2}Transmit State -- ES_TIMEOUT and transmit enabled\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("Farmer TX SM -- Waiting{2}Transmit State -- ES__SEND_RESPONSE\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//Set CurrentState to Transmit}}}\par\pard
\cbpat1{{\cf2{				CurrentState}} {\cf11{=}} {\cf2{Transmit}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Build the message to send}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{BuildPacket}}{\cf2{}}{\cf11{(}}{\cf2{DataHeader}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Reset the message counter (packet byte index)}}}\par\pard
\cbpat1{{\cf2{				MessIndex}} {\cf11{=}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//MAKE SURE DATA LENGTH GETS SET WHEN MESSAGE TYPE GETS SET}}}\par\pard
\cbpat1{{\cf2{				BytesRemaining}} {\cf11{=}} {\cf2{TX_PREAMBLE_LENGTH}} {\cf11{+}} {\cf2{DataLength}} {\cf11{+}} {\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{;}} {\cf2{}}{\cf5{// bytes to write = preamble + data + checksum}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//BytesRemaining = {1}{4};}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//if TXFE clear}}}\par\pard
\cbpat1{{\cf2{}}				{\cf13{if}}{\cf2{}}{\cf11{((}}{\cf2{}}{\cf16{HWREG}}{\cf2{}}{\cf11{(}}{\cf2{UART{1}_BASE}}{\cf11{+}}{\cf2{UART_O_FR}}{\cf11{) &}} {\cf2{UART_FR_TXFE}}{\cf11{) !=}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}				{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}					{\cf5{//printf("Farmer TX SM -- Waiting{2}Transmit State -- Sending Message\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}					{\cf5{//Write first byte of the message to send into the UART data register}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{HWREG}}{\cf2{}}{\cf11{(}}{\cf2{UART{1}_BASE}}{\cf11{+}}{\cf2{UART_O_DR}}{\cf11{) =}} {\cf2{Message}}{\cf11{[}}{\cf2{MessIndex}}{\cf11{];}}}\par\pard
\cbpat1{{\cf2{}}					{\cf5{//decrement BytesRemaining}}}\par\pard
\cbpat1{{\cf2{					BytesRemaining}}{\cf11{--;}}}\par\pard
\cbpat1{{\cf2{}}					{\cf5{//increment messIndex}}}\par\pard
\cbpat1{{\cf2{					MessIndex}}{\cf11{++;}}}\par\pard
\cbpat1{{\cf2{}}					{\cf5{//if TXFe clear}}}\par\pard
\cbpat1{{\cf2{}}					{\cf13{if}}{\cf2{}}{\cf11{((}}{\cf2{}}{\cf16{HWREG}}{\cf2{}}{\cf11{(}}{\cf2{UART{1}_BASE}}{\cf11{+}}{\cf2{UART_O_FR}}{\cf11{) &}} {\cf2{UART_FR_TXFE}}{\cf11{) !=}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{)}} }\par\pard
\cbpat1{{\cf2{}}					{\cf11{\{}}																											}\par\pard
\cbpat1{{\cf2{}}						{\cf5{//Write second byte of the message to send into the UART data register}}}\par\pard
\cbpat1{{\cf2{}}						{\cf16{HWREG}}{\cf2{}}{\cf11{(}}{\cf2{UART{1}_BASE}}{\cf11{+}}{\cf2{UART_O_DR}}{\cf11{) =}} {\cf2{Message}}{\cf11{[}}{\cf2{MessIndex}}{\cf11{];}}}\par\pard
\cbpat1{{\cf2{}}						{\cf5{//decrement BytesRemaining}}}\par\pard
\cbpat1{{\cf2{						BytesRemaining}}{\cf11{--;}}}\par\pard
\cbpat1{{\cf2{}}						{\cf5{//increment messIndex}}}\par\pard
\cbpat1{{\cf2{						MessIndex}}{\cf11{++;}}}\par\pard
\cbpat1{{\cf2{}}					{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}					{\cf5{//Enable Tx interrupts in the UART}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{HWREG}}{\cf2{}}{\cf11{(}}{\cf2{UART{1}_BASE}} {\cf11{+}} {\cf2{UART_O_IM}}{\cf11{) =}} {\cf2{}}{\cf16{HWREG}}{\cf2{}}{\cf11{(}}{\cf2{UART{1}_BASE}} {\cf11{+}} {\cf2{UART_O_IM}}{\cf11{) |}} {\cf2{UART_IM_TXIM}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			}\par\pard
\cbpat1{			}\par\pard
\cbpat1{			{\cf13{break}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{		{\cf5{//Case Transmit}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{case}} {\cf2{Transmit}} {\cf11{:}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//If ThisEvent is ES_TRANSMIT_COMPLETE}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_TRANSMIT_COMPLETE}}{\cf11{)\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("Farmer TX SM -- Transmit State -- Transmit Completed\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//Set CurrentState to Waiting{2}Transmit}}}\par\pard
\cbpat1{{\cf2{				CurrentState}} {\cf11{=}} {\cf2{Waiting{2}Transmit}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Set TransEnable to false}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//TransEnable = false;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{MessageTransmitted}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{break}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}    {\cf13{default}} {\cf2{}}{\cf11{:}}}\par\pard
\cbpat1{{\cf2{}}      {\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}  {\cf11{\}}}  {\cf2{}}{\cf5{// end switch on Current State}}}\par\pard
\cbpat1{{\cf2{}}  {\cf13{return}} {\cf2{ReturnEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{     QueryFarmerTXSM}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{     None}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{     FarmerTX_State_t The current state of the Template state machine}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{     returns the current state of the Template state machine}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Author}}}\par\pard
\cbpat1{{\cf6{Matthew Miller, {5}/{1}{3}/{1}{7}, {2}{2}:{4}{2}}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}\par\pard
\cbpat1{FarmerTX_State_t}} {\cf16{QueryFarmerTXSM}} {\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}   {\cf13{return}}{\cf2{}}{\cf11{(}}{\cf2{CurrentState}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{     FarmerTX_ISR}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{     None}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{     The interrupt response for the UART receive}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{     stores the received byte into the data}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Author}}}\par\pard
\cbpat1{{\cf6{Matthew Miller, {5}/{1}{3}/{1}{7}, {2}{2}:{4}{2}}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf14{void}} {\cf2{}}{\cf16{FarmerTX_ISR}}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{)\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Write next byte of message }}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{HWREG}}{\cf2{}}{\cf11{(}}{\cf2{UART{1}_BASE}}{\cf11{+}}{\cf2{UART_O_DR}}{\cf11{) =}} {\cf2{Message}}{\cf11{[}}{\cf2{MessIndex}}{\cf11{];}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Decrement BytesRemaining}}}\par\pard
\cbpat1{{\cf2{	BytesRemaining}}{\cf11{--;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Increment messIndex}}}\par\pard
\cbpat1{{\cf2{	MessIndex}}{\cf11{++;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{MessIndex}} {\cf11{>}} {\cf2{}}{\cf4{{4}{2}}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//printf("FATAL TRANSMIT OVERFLOW ERROR\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//If BytesRemaining is {0}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{BytesRemaining}} {\cf11{==}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{)\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Disable interrupt on TX}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{HWREG}}{\cf2{}}{\cf11{(}}{\cf2{UART{1}_BASE}} {\cf11{+}} {\cf2{UART_O_IM}}{\cf11{) =}} {\cf2{}}{\cf16{HWREG}}{\cf2{}}{\cf11{(}}{\cf2{UART{1}_BASE}} {\cf11{+}} {\cf2{UART_O_IM}}{\cf11{) & ~}}{\cf2{UART_IM_TXIM}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}		}\par\pard
\cbpat1{		{\cf5{//Post ES_TRANSMIT_COMPLETE event}}}\par\pard
\cbpat1{{\cf2{		ES_Event ReturnEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{		ReturnEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_TRANSMIT_COMPLETE}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{PostFarmerTXSM}}{\cf2{}}{\cf11{(}}{\cf2{ReturnEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{void}} {\cf2{}}{\cf16{enableTransmit}}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{)\{}}}\par\pard
\cbpat1{{\cf2{	TransEnable}} {\cf11{=}} {\cf2{}}{\cf13{true}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{return}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{void}} {\cf2{}}{\cf16{disableTransmit}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{	TransEnable}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf5{//Sets the DataHeader to the correct message type and updates the length of the data}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{}}{\cf16{setFarmerDataHeader}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{uint{8}_t}} {\cf2{Header}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Set DataHeader to Header}}}\par\pard
\cbpat1{{\cf2{	DataHeader}} {\cf11{=}} {\cf2{Header}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//if DataHeader is REQ_{2}_PAIR}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{DataHeader}} {\cf11{==}} {\cf2{REQ_{2}_PAIR}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//printf("Farmer TX SM -- Data Header -- REQ_{2}_PAIR\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Set DataLength to REQ_{2}_PAIR_LENGTH}}}\par\pard
\cbpat1{{\cf2{		DataLength}} {\cf11{=}} {\cf2{REQ_{2}_PAIR_LENGTH}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//ElseIf DataHeader is ENCR_KEY}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{DataHeader}} {\cf11{==}} {\cf2{ENCR_KEY}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//printf("Farmer TX SM -- Data Header -- ENCR_KEY\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Set DataLength to ENCR_KEY_LENGTH}}}\par\pard
\cbpat1{{\cf2{		DataLength}} {\cf11{=}} {\cf2{ENCR_KEY_LENGTH}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//ElseIf DataHeader is CTRL}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{else if}} {\cf2{}}{\cf11{(}}{\cf2{DataHeader}} {\cf11{==}}  {\cf2{CTRL}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//printf("Farmer TX SM -- Data Header -- CTRL\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Set DataLength to CTRL_LENGTH}}}\par\pard
\cbpat1{{\cf2{		DataLength}} {\cf11{=}} {\cf2{CTRL_LENGTH}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}{\cf2{}}{\cf5{//EndIf}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{else}} {\cf2{}}{\cf5{//must be an unintended message type}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//print an error message}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//printf("FARMER DATAHEADER SET TO UNEXPECTED MESSAGE TYPE");}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{//Sets the Destination XBEE address the message will be sent to}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{}}{\cf16{setDestDogAddress}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{uint{8}_t}} {\cf2{AddrMSB}}{\cf11{,}} {\cf2{}}{\cf14{uint{8}_t}} {\cf2{AddrLSB}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//printf("Set Destination Dog Address -- ADDRESS\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Set Destination MSB to AddrMSB}}}\par\pard
\cbpat1{{\cf2{	DestAddrMSB}} {\cf11{=}} {\cf2{AddrMSB}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//DestAddrMSB = {0}x{2}{1};}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Set Destination LSB to AddrLSB}}}\par\pard
\cbpat1{{\cf2{	DestAddrLSB}} {\cf11{=}} {\cf2{AddrLSB}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//DestAddrLSB = {0}x{8}{1};}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{//Sets the DogTag number of the Dog to be paired with from a REQ_{2}_PAIR command}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{}}{\cf16{setDogTag}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{uint{8}_t}} {\cf2{TagNumber}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Set DogTag to TagNumber}}}\par\pard
\cbpat1{{\cf2{	DogTag}} {\cf11{=}} {\cf2{TagNumber}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{void}} {\cf2{}}{\cf16{EnableReverse}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Set reverse flag}}}\par\pard
\cbpat1{{\cf2{	ReverseActive}} {\cf11{=}} {\cf2{}}{\cf13{true}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{void}} {\cf2{}}{\cf16{DisableReverse}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Clear reverse flag}}}\par\pard
\cbpat1{{\cf2{	ReverseActive}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// Turn on left brake}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{}}{\cf16{EnableLeftBrake}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{	LeftBrakeActive}} {\cf11{=}} {\cf2{}}{\cf13{true}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// Turn off left brake}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{}}{\cf16{DisableLeftBrake}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{	LeftBrakeActive}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// Turn on right brake}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{}}{\cf16{EnableRightBrake}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{	RightBrakeActive}} {\cf11{=}} {\cf2{}}{\cf13{true}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// Turn off right brake}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{}}{\cf16{DisableRightBrake}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{	RightBrakeActive}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{void}} {\cf2{}}{\cf16{TogglePeripheral}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{	PeripheralToggled}} {\cf11{= !}}{\cf2{PeripheralToggled}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{uint{8}_t}} {\cf2{}}{\cf16{getDestAddrMSB}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{return}} {\cf2{DestAddrMSB}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{uint{8}_t}} {\cf2{}}{\cf16{getDestAddrLSB}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{return}} {\cf2{DestAddrLSB}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{void}} {\cf2{}}{\cf16{resetEncryptionIndex}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{	EncryptionKeyIndex}} {\cf11{=}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{uint{8}_t}} {\cf2{}}{\cf16{getEncryptionKeyIndex}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{return}} {\cf2{EncryptionKeyIndex}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{void}} {\cf2{}}{\cf16{clearControls}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}	}\par\pard
\cbpat1{{\cf2{	RightBrakeActive}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{	LeftBrakeActive}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{	ReverseActive}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{	PeripheralToggled}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf6{/***************************************************************************}}}\par\pard
\cbpat1{{\cf6{ private functions}}}\par\pard
\cbpat1{{\cf6{ ***************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{MessageTransmitted}}{\cf2{}}{\cf11{()}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//printf("Packet length: %i bytes\\r\\n", TX_PREAMBLE_LENGTH+DataLength+{1});}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf6{/*}}}\par\pard
\cbpat1{{\cf6{	for(int i = {0}; i<(TX_PREAMBLE_LENGTH+DataLength+{1});i++)}}}\par\pard
\cbpat1{{\cf6{	\{}}}\par\pard
\cbpat1{{\cf6{		printf("TX %i: %{0}{4}x\\r\\n",i,Message[i]);}}}\par\pard
\cbpat1{{\cf6{	\}}}}\par\pard
\cbpat1{{\cf6{	*/}}{\cf2{}}}\par\pard
\cbpat1{	}\par\pard
\cbpat1{	{\cf13{return}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{ClearMessageArray}}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{for}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{int}} {\cf2{i}} {\cf11{=}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{;}} {\cf2{i}}{\cf11{<(}}{\cf2{TX_PREAMBLE_LENGTH}}{\cf11{+}}{\cf2{DataLength}}{\cf11{+}}{\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{);}}{\cf2{i}}{\cf11{++)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{		Message}}{\cf11{[}}{\cf2{i}}{\cf11{] =}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{return}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{BuildPacket}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{uint{8}_t}} {\cf2{packetType}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//printf("Build Packet -- TOP\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Build the preamble of the packet}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{BuildPreamble}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//If packetType is REQ_{2}_PAIR}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{packetType}} {\cf11{==}} {\cf2{REQ_{2}_PAIR}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//printf("Build Packet -- BuildPacket -- REQ{2}PAIR\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//Build the rest of the data as a REQ_{2}_PAIR packet}}}\par\pard
\cbpat1{{\cf2{}}			{\cf16{BuildReq{2}PairPacket}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Else If packetType is ENCR_KEY}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{packetType}} {\cf11{==}} {\cf2{ENCR_KEY}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//printf("Build Packet -- BuildPacket -- ENCR_KEY\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//Build the rest of the data as an ENCR_KEY packetType}}}\par\pard
\cbpat1{{\cf2{}}			{\cf16{BuildEncrKeyPacket}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Else If packetType is CTRL}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{packetType}} {\cf11{==}} {\cf2{CTRL}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\{}}	}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//printf("Build Packet -- BuildPacket -- CTRL\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//Build the rest of the data as a CTRL packet}}}\par\pard
\cbpat1{{\cf2{}}			{\cf16{BuildCtrlPacket}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{else}} {\cf2{}}{\cf5{//	Else we must have gotten an unexpected packet type}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//Print an error message to show we got a bad packet request}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//printf("UNEXPECTED PACKET TYPE REQUESTED TO TRANSMIT");}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{//	EndIf}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{BuildPreamble}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store START_DELIMITER in byte {0} of PacketArray}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{] =}} {\cf2{START_DELIMITER}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store PACKET_LENGTH_MSB in byte {1} of PacketArray ({0}x{0}{0})}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{] =}} {\cf2{PACKET_LENGTH_MSB}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store DataLength in byte {2} of PacketArray	}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{}}{\cf4{{2}}}{\cf2{}}{\cf11{] =}} {\cf2{DataLength}} {\cf11{+}} {\cf2{FRAME_DATA_PREAMBLE_LENGTH}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store TX_API_IDENTIFIER in byte {3} of PacketArray ({0}x{0}{1})}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{}}{\cf4{{3}}}{\cf2{}}{\cf11{] =}} {\cf2{TX_API_IDENTIFIER}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store TX_FRAME_ID in byte {4} of PacketArray (Should this be {0}x{0}{0} or a different value?)}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{}}{\cf4{{4}}}{\cf2{}}{\cf11{] =}} {\cf2{TX_FRAME_ID}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store DestAddrMSB in byte {5} of PacketArray (Write {0}xff to both for broadcast)}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{}}{\cf4{{5}}}{\cf2{}}{\cf11{] =}} {\cf2{DestAddrMSB}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store DestAddrLSB in byte {6} of PacketArray (Write {0}xff to both for broadcast)}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{}}{\cf4{{6}}}{\cf2{}}{\cf11{] =}} {\cf2{DestAddrLSB}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store OPTIONS in byte {7} of PacketArray ({0}x{0}{0})}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{}}{\cf4{{7}}}{\cf2{}}{\cf11{] =}} {\cf2{OPTIONS}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{BuildReq{2}PairPacket}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//printf("Build Packet -- Building the Packet -- REQ{2}PAIR\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Set DataIndex to TX_PREAMBLE_LENGTH}}}\par\pard
\cbpat1{{\cf2{	DataIndex}} {\cf11{=}} {\cf2{TX_PREAMBLE_LENGTH}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store DataHeader in byte DataIndex of PacketArray}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{DataIndex}}{\cf11{] =}} {\cf2{DataHeader}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf5{//Increment DataIndex}}}\par\pard
\cbpat1{{\cf2{	DataIndex}}{\cf11{++;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store DogTag in byte DataIndex of PacketArray}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{DataIndex}}{\cf11{] =}} {\cf2{DogTag}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf5{//Increment DataIndex}}}\par\pard
\cbpat1{{\cf2{	DataIndex}}{\cf11{++;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Calculate the checksum}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{calculateChecksum}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store the checksum in byte DataIndex of PacketArray}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{DataIndex}}{\cf11{] =}} {\cf2{Checksum}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{BuildEncrKeyPacket}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//printf("Build Packet -- Building the Packet -- Encr\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Set DataIndex to TX_PREAMBLE_LENGTH}}}\par\pard
\cbpat1{{\cf2{	DataIndex}} {\cf11{=}} {\cf2{TX_PREAMBLE_LENGTH}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store DataHeader in byte DataIndex of PacketArray}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{DataIndex}}{\cf11{] =}} {\cf2{DataHeader}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf5{//Generate a new encyption key since we are attempting a new pair}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{generateEncryptionKey}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf5{//Loop ENCR_KEY_LENGTH - {1} times (we don't include the header)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{for}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{uint{8}_t}} {\cf2{i}} {\cf11{=}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{;}} {\cf2{i}} {\cf11{<}} {\cf2{ENCR_KEY_LENGTH}}{\cf11{-}}{\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{;}} {\cf2{i}}{\cf11{++)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Increment DataIndex}}}\par\pard
\cbpat1{{\cf2{		DataIndex}}{\cf11{++;}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Store element i of EncryptionKey in byte DataIndex of PacketArray}}}\par\pard
\cbpat1{{\cf2{		Message}}{\cf11{[}}{\cf2{DataIndex}}{\cf11{] =}} {\cf2{EncryptionKey}}{\cf11{[}}{\cf2{i}}{\cf11{];}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}{\cf2{}}{\cf5{//EndLoop}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf5{//Reset EncryptionKeyIndex}}}\par\pard
\cbpat1{{\cf2{	EncryptionKeyIndex}} {\cf11{=}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf5{//Increment DataIndex}}}\par\pard
\cbpat1{{\cf2{	DataIndex}}{\cf11{++;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Calculate the checksum}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{calculateChecksum}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store the checksum in byte DataIndex of PacketArray}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{DataIndex}}{\cf11{] =}} {\cf2{Checksum}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{BuildCtrlPacket}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf5{//Set DataIndex to TX_PREAMBLE_LENGTH}}}\par\pard
\cbpat1{{\cf2{	DataIndex}} {\cf11{=}} {\cf2{TX_PREAMBLE_LENGTH}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Encrypt DataHeader using element of EncryptionKey corresponding to EncryptionKeyIndex and store in Messaage}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//printf("Unencrypted Byte: %i, EncryptionKeyIndex: %i, EncryptionKey: %i\\r\\n", DataHeader, EncryptionKeyIndex, EncryptionKey[EncryptionKeyIndex]);}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{DataIndex}}{\cf11{] =}} {\cf2{DataHeader}}{\cf11{^}} {\cf2{EncryptionKey}}{\cf11{[}}{\cf2{EncryptionKeyIndex}}{\cf11{];}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Increment EncryptionKeyIndex (modulo {3}{2})}}}\par\pard
\cbpat1{{\cf2{	EncryptionKeyIndex}} {\cf11{= (}}{\cf2{EncryptionKeyIndex}} {\cf11{+}} {\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{)%}}{\cf2{}}{\cf4{{3}{2}}}{\cf2{}}{\cf11{;}}	}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{}\par\pard
\cbpat1{	{\cf5{//Increment DataIndex}}}\par\pard
\cbpat1{{\cf2{	DataIndex}}{\cf11{++;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Set the DriveCtrl value based on the accelerometer reading and the Reverse button}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{setDriveCtrl}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Encrypt DriveCtrl using element of EncryptionKey corresponding to EncryptionKeyIndex and store in Message}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//printf("Unencrypted Byte: %i, EncryptionKeyIndex: %i, EncryptionKey: %i\\r\\n", DriveCtrl, EncryptionKeyIndex, EncryptionKey[EncryptionKeyIndex]);}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{DataIndex}}{\cf11{] =}} {\cf2{DriveCtrl}}{\cf11{^}} {\cf2{EncryptionKey}}{\cf11{[}}{\cf2{EncryptionKeyIndex}}{\cf11{];}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Increment EncryptionKeyIndex (modulo {3}{2})}}}\par\pard
\cbpat1{{\cf2{	EncryptionKeyIndex}} {\cf11{= (}}{\cf2{EncryptionKeyIndex}} {\cf11{+}} {\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{)%}}{\cf2{}}{\cf4{{3}{2}}}{\cf2{}}{\cf11{;}}	}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf5{//Increment DataIndex}}}\par\pard
\cbpat1{{\cf2{	DataIndex}}{\cf11{++;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Set the SteeringCtrl value based on the state of the brake buttons}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{setSteeringCtrl}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Encrypt SteeringCtrl using element of EncryptionKey corresponding to EncryptionKeyIndex and Store in Message}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//printf("Unencrypted Byte: %i, EncryptionKeyIndex: %i, EncryptionKey: %i\\r\\n", SteeringCtrl, EncryptionKeyIndex, EncryptionKey[EncryptionKeyIndex]);}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{DataIndex}}{\cf11{] =}} {\cf2{SteeringCtrl}}{\cf11{^}} {\cf2{EncryptionKey}}{\cf11{[}}{\cf2{EncryptionKeyIndex}}{\cf11{];}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Increment EncryptionKeyIndex (modulo {3}{2})}}}\par\pard
\cbpat1{{\cf2{	EncryptionKeyIndex}} {\cf11{= (}}{\cf2{EncryptionKeyIndex}} {\cf11{+}} {\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{)%}}{\cf2{}}{\cf4{{3}{2}}}{\cf2{}}{\cf11{;}}	}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{	{\cf5{//Increment DataIndex}}}\par\pard
\cbpat1{{\cf2{	DataIndex}}{\cf11{++;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Set the DigitalCtrl value based on the state of the peripheral/brake buttons}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{setDigitalCtrl}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Encrypt DigitalCtrl using element of EncryptionKey corresponding to EncryptionKeyIndex and store in Message}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//printf("Unencrypted Byte: %i, EncryptionKeyIndex: %i, EncryptionKey: %i\\r\\n", DigitalCtrl, EncryptionKeyIndex, EncryptionKey[EncryptionKeyIndex]);}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{DataIndex}}{\cf11{] =}} {\cf2{DigitalCtrl}}{\cf11{^}} {\cf2{EncryptionKey}}{\cf11{[}}{\cf2{EncryptionKeyIndex}}{\cf11{];}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Increment EncryptionKeyIndex (modulo {3}{2})}}}\par\pard
\cbpat1{{\cf2{	EncryptionKeyIndex}} {\cf11{= (}}{\cf2{EncryptionKeyIndex}} {\cf11{+}} {\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{)%}}{\cf2{}}{\cf4{{3}{2}}}{\cf2{}}{\cf11{;}}	}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Increment dataIndex}}}\par\pard
\cbpat1{{\cf2{	DataIndex}}{\cf11{++;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Calculate the checksum}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{calculateChecksum}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Store the checksum in byte dataIndex of PacketArray}}}\par\pard
\cbpat1{{\cf2{	Message}}{\cf11{[}}{\cf2{DataIndex}}{\cf11{] =}} {\cf2{Checksum}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{generateEncryptionKey}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Loop ENCR_KEY_LENGTH - {1} times (we don't want to count the header)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{for}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{uint{8}_t}} {\cf2{i}} {\cf11{=}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{;}} {\cf2{i}} {\cf11{<}} {\cf2{ENCR_KEY_LENGTH}}{\cf11{-}}{\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{;}} {\cf2{i}}{\cf11{++)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Generate a random {8} bit number and store in EncryptionKey array}}}\par\pard
\cbpat1{{\cf2{		EncryptionKey}}{\cf11{[}}{\cf2{i}}{\cf11{] =}} {\cf2{}}{\cf16{rand}}{\cf2{}}{\cf11{()%}}{\cf2{}}{\cf4{{2}{5}{6}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}{\cf2{}}{\cf5{//EndLoop}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{calculateChecksum}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}} {\cf2{}}{\cf5{//probably don't need this since GenCheckSum exists}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//local variable Sum}}}\par\pard
\cbpat1{{\cf2{}}	{\cf14{uint{8}_t}} {\cf2{Sum}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//local variable Index}}}\par\pard
\cbpat1{{\cf2{}}	{\cf14{uint{8}_t}} {\cf2{Index}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//local variable FrameDataLength}}}\par\pard
\cbpat1{{\cf2{}}	{\cf14{uint{8}_t}}	{\cf2{FrameDataLength}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf5{//Initialize Sum to {0}}}}\par\pard
\cbpat1{{\cf2{	Sum}} {\cf11{=}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf5{//Set FrameDataLength to DataLength + FRAME_DATA_PREAMBLE_LENGTH ({5})	}}}\par\pard
\cbpat1{{\cf2{	FrameDataLength}} {\cf11{=}} {\cf2{DataLength}} {\cf11{+}} {\cf2{FRAME_DATA_PREAMBLE_LENGTH}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf5{//Loop FrameDataLength times}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//start Index at {3} (where the frame data begins_}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{for}}{\cf2{}}{\cf11{(}}{\cf2{Index}} {\cf11{=}} {\cf2{FRAME_DATA_START}}{\cf11{;}} {\cf2{Index}} {\cf11{<}} {\cf2{FRAME_DATA_START}} {\cf11{+}} {\cf2{FrameDataLength}}{\cf11{;}} {\cf2{Index}}{\cf11{++)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Add element Index of PacketArray to Sum}}}\par\pard
\cbpat1{{\cf2{		Sum}} {\cf11{+=}} {\cf2{Message}}{\cf11{[}}{\cf2{Index}}{\cf11{];}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//printf("Current Sum: %i\\r\\n", Sum);}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}{\cf2{}}{\cf5{//End Loop}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf5{//Subtract Sum from {0}xff and store in Checksum}}}\par\pard
\cbpat1{{\cf2{	Checksum}} {\cf11{=}} {\cf2{}}{\cf4{{0}xFF}} {\cf2{}}{\cf11{-}} {\cf2{Sum}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf5{//Sets the Drive Control byte for a control message}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{setDriveCtrl}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//scale the speed of the thrust fan based upon the period measured in the IMU}}}\par\pard
\cbpat1{{\cf2{}}	{\cf14{uint{1}{6}_t}} {\cf2{Period}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{	Period}} {\cf11{=}} {\cf2{}}{\cf16{getPeriod}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//if we want to go forward}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{if}}{\cf2{}}{\cf11{(!}}{\cf2{ReverseActive}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//if the period is faster than {3}{0}{0}, saturate the value}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{Period}} {\cf11{<}} {\cf2{}}{\cf4{{3}{0}{0}}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{			DriveCtrl}} {\cf11{=}} {\cf2{MAX_FORWARD}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//else scale the value between {1}{2}{7} and {2}{5}{5}}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{else}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{			DriveCtrl}} {\cf11{= (}}{\cf2{}}{\cf14{uint{8}_t}}{\cf2{}}{\cf11{)((((}}{\cf2{}}{\cf4{{1}{0}{0}{0}}}{\cf2{}}{\cf11{-(}}{\cf2{}}{\cf14{uint{3}{2}_t}}{\cf2{}}{\cf11{)}}{\cf2{Period}}{\cf11{)*}}{\cf2{}}{\cf4{{1}{2}{8}}}{\cf2{}}{\cf11{)/}}{\cf2{}}{\cf4{{7}{0}{0}}}{\cf2{}}{\cf11{)+}}{\cf2{}}{\cf4{{1}{2}{7}}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{		{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//else we want to go in reverse}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{else}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//if the period is faster than {3}{0}{0}, saturate the value}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{Period}} {\cf11{<}} {\cf2{}}{\cf4{{3}{0}{0}}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{			DriveCtrl}} {\cf11{=}} {\cf2{MAX_REVERSE}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//else scale the value between {1}{2}{7} and {0}}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{else}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{			DriveCtrl}} {\cf11{= (}}{\cf2{}}{\cf14{uint{8}_t}}{\cf2{}}{\cf11{)(}}{\cf2{}}{\cf4{{1}{2}{7}}}{\cf2{}}{\cf11{-(((}}{\cf2{}}{\cf4{{1}{0}{0}{0}}}{\cf2{}}{\cf11{-(}}{\cf2{}}{\cf14{uint{3}{2}_t}}{\cf2{}}{\cf11{)}}{\cf2{Period}}{\cf11{)*}}{\cf2{}}{\cf4{{1}{2}{7}}}{\cf2{}}{\cf11{)/}}{\cf2{}}{\cf4{{7}{0}{0}}}{\cf2{}}{\cf11{));}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"THRUST FAN DUTY CYCLE = %i}} {\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{,}} {\cf2{DriveCtrl}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf5{//Sets the Steering Control byte for a control message}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{setSteeringCtrl}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Set SteeringCtrl to CtrlByte}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//SteeringCtrl = CtrlByte;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//If both brakes are active, we want to enable the brake bit and still go straight}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{RightBrakeActive}} {\cf11{&&}} {\cf2{LeftBrakeActive}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{		SteeringCtrl}} {\cf11{=}} {\cf2{STRAIGHT}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//If we are only braking right we want to set the steering to be all the way right}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{RightBrakeActive}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{		SteeringCtrl}} {\cf11{=}} {\cf2{MAX_RIGHT_TURN}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//If we are only braking left we want to set the steering to be all the way left}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{LeftBrakeActive}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{		SteeringCtrl}} {\cf11{=}} {\cf2{MAX_LEFT_TURN}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//If no brakes are active we want to go straight}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{else}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{		SteeringCtrl}} {\cf11{=}} {\cf2{STRAIGHT}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{//Sets the Digital Control byte for a control message}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{setDigitalCtrl}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Set DigitalCtrl to CtrlByte}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//DigitalCtrl = CtrlByte;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//If the peripheral is set }}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{PeripheralToggled}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Set the peripheral bit in DigitalCtrl}}}\par\pard
\cbpat1{{\cf2{		DigitalCtrl}} {\cf11{|=}} {\cf2{BIT{0}HI}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//only set it for this one data packet}}}\par\pard
\cbpat1{{\cf2{		PeripheralToggled}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}{\cf2{}}{\cf5{//EndIf}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf13{else}} {\cf2{}}{\cf5{//we want to make sure to send a {0} to the DOG}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{		DigitalCtrl}} {\cf11{&= ~(}}{\cf2{BIT{0}HI}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//If both Left and Right brakes are active}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{LeftBrakeActive}} {\cf11{&&}} {\cf2{RightBrakeActive}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//Set the braking bit in DigitalCtrl}}}\par\pard
\cbpat1{{\cf2{		DigitalCtrl}} {\cf11{|=}} {\cf2{BIT{1}HI}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}{\cf2{}}{\cf5{//EndIf}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf13{else}} {\cf2{}}{\cf5{//make sure the braking bit is CLEAR}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{		DigitalCtrl}} {\cf11{&= ~(}}{\cf2{BIT{1}HI}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	}\par\pard
\cbpat1{{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{}\par\pard
\cbpat1{}\par\pard
\cbpat1{}}
