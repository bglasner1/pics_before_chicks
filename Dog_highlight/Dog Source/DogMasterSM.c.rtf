{\rtf1\ansi\uc0 \deff1{\fonttbl{\f1\fmodern\fprq1\fcharset0 Courier New;}}{\colortbl;\red255\green255\blue255;\red51\green00\blue102;\red24\green97\blue167;\red50\green186\blue06;\red00\green102\blue51;\red00\green102\blue51;\red166\green23\blue97;\red83\green116\blue176;\red102\green51\blue00;\red154\green154\blue154;\red85\green85\blue85;\red166\green23\blue97;\red255\green48\blue48;\red244\green140\blue35;\red00\green00\blue255;\red209\green28\blue237;}
\paperw11905\paperh16837\margl1134\margr1134\margt1134\margb1134\sectd\plain\f1\fs20
\pard \cbpat1{{\cf2{}}{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Module}}}\par\pard
\cbpat1{{\cf6{   DogMasterSM.c}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Revision}}}\par\pard
\cbpat1{{\cf6{   {1}.{0}.{1}}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{   The receiving state machine for the Farmer}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ History}}}\par\pard
\cbpat1{{\cf6{ When           Who     What/Why}}}\par\pard
\cbpat1{{\cf6{ -------------- ---     --------}}}\par\pard
\cbpat1{{\cf6{ {0}{5}/{2}{0}/{1}{7} {1}:{5}{1}	bag			created for the project}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf6{/*----------------------------- Include Files -----------------------------*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf6{/* include header files for this state machine as well as any machines at the}}}\par\pard
\cbpat1{{\cf6{   next lower level in the hierarchy that are sub-machines to this machine}}}\par\pard
\cbpat1{{\cf6{*/}}{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf8{#include}} {\cf9{"ES_Configure.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"ES_Framework.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"DogMasterSM.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"DogTXSM.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"DogRXSM.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"Constants.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"Hardware.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"DiscoBallSM.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf8{#include}} {\cf9{"inc/hw_memmap.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_types.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_gpio.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_nvic.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_uart.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"inc/hw_sysctl.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"driverlib/sysctl.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"driverlib/pin_map.h"}}{\cf8{}}	{\cf5{// Define PART_TM{4}C{1}{2}{3}GH{6}PM in project}}}\par\pard
\cbpat1{{\cf8{}}{\cf2{}}{\cf8{#include}} {\cf9{"driverlib/gpio.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"driverlib/uart.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf8{#define HARD_CODE_DOG_TAG {2}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/*---------------------------- Module Functions ---------------------------*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf6{/* prototypes for private functions for this machine.They should be functions}}}\par\pard
\cbpat1{{\cf6{   relevant to the behavior of this state machine }}}\par\pard
\cbpat1{{\cf6{*/}}{\cf2{}}   }\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{HandleReq}}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static void}} {\cf2{}}{\cf16{HandleCtrl}}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/*---------------------------- Module Variables ---------------------------*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf5{// everybody needs a state variable, you may need others as well.}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// type of state variable should match htat of enum in header file}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{static}} {\cf2{DogMasterState_t CurrentState}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{MyPriority}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{8}_t}} {\cf2{DogSelect}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static bool}} {\cf2{PeripheralActive}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf6{/*------------------------------ Module Code ------------------------------*/}}{\cf2{}}}\par\pard
\cbpat1{{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{     InitDogMasterSM}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{     uint{8}_t : the priorty of this service}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{     bool, false if error in initialization, true otherwise}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{     Saves away the priority, sets up the initial transition and does any}}}\par\pard
\cbpat1{{\cf6{     other required initialization for this state machine}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Author}}}\par\pard
\cbpat1{{\cf6{     Matthew W Miller, {5}/{1}{3}/{2}{0}{1}{7}, {1}{7}:{3}{1}}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf14{bool}} {\cf2{}}{\cf16{InitDogMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{uint{8}_t}} {\cf2{Priority}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{// state is unpaired}}}\par\pard
\cbpat1{{\cf2{	CurrentState}} {\cf11{=}} {\cf2{Unpaired}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{// post entry event to self}}}\par\pard
\cbpat1{{\cf2{	ES_Event EntryEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{	EntryEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_ENTRY}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{// set priority}}}\par\pard
\cbpat1{{\cf2{	MyPriority}} {\cf11{=}} {\cf2{Priority}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//make sure lift fan is disabled}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{sendToPIC}}{\cf2{}}{\cf11{(}}{\cf2{LIFT_FAN_OFF}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{	PeripheralActive}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf13{if}} {\cf2{}}{\cf11{(}}{\cf2{}}{\cf16{PostDogMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{EntryEvent}}{\cf11{))}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{return true}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{else}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{return false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{     PostDogMasterSM}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{     EF_Event ThisEvent , the event to post to the queue}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{     boolean False if the Enqueue operation failed, True otherwise}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{     Posts an event to this state machine's queue}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Author}}}\par\pard
\cbpat1{{\cf6{     J. Edward Carryer, {1}{0}/{2}{3}/{1}{1}, {1}{9}:{2}{5}}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf14{bool}} {\cf2{}}{\cf16{PostDogMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{ES_Event ThisEvent}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{// post event}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{return}} {\cf2{}}{\cf16{ES_PostToService}}{\cf2{}}{\cf11{(}}{\cf2{MyPriority}}{\cf11{,}} {\cf2{ThisEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{    RunDogMasterSM}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{   ES_Event : the event to process}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{   ES_Event, ES_NO_EVENT if no error ES_ERROR otherwise}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{   add your description here}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{   uses nested switch/case to implement the machine.}}}\par\pard
\cbpat1{{\cf6{ Author}}}\par\pard
\cbpat1{{\cf6{   Matthew Miller, {0}{5}/{1}{3}/{1}{7}, {1}{7}:{5}{4}}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}\par\pard
\cbpat1{ES_Event}} {\cf16{RunDogMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{ES_Event ThisEvent}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{// set return event}}}\par\pard
\cbpat1{{\cf2{	ES_Event ReturnEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{	ReturnEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_NO_EVENT}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{// next state is current state}}}\par\pard
\cbpat1{{\cf2{	DogMasterState_t NextState}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{	NextState}} {\cf11{=}} {\cf2{CurrentState}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//printf("DogMasterCurrentState = %i\\r\\n",CurrentState);}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{// switch through states}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{switch}}{\cf2{}}{\cf11{(}}{\cf2{CurrentState}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{// if current state is unpaired}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{case}} {\cf2{Unpaired}}{\cf11{:}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{// if event is entry}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"Dog Master SM -- Unpaired State -- Top}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_ENTRY}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// stop electromechanical indicator}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// clear LED active}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// call LED setter}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// turn thrust fan off}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// set all brakes inactive}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// call brake setter}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// turn lift fan off}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//printf("Dog Master SM -- Unpaired State -- Entry Event\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			}\par\pard
\cbpat1{			{\cf5{// else if the event is ES_MESSAGE_REC and the header is a PAIR_REQ and the API is {8}{1} and dog tag is correct}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_MESSAGE_REC}} {\cf11{&&}} {\cf2{}}{\cf16{getHeader}}{\cf2{}}{\cf11{() ==}} {\cf2{REQ_{2}_PAIR}} {\cf11{&&}} {\cf2{}}{\cf16{getHardwareDogTag}}{\cf2{}}{\cf11{() ==}} {\cf2{}}{\cf16{getSoftwareDogTag}}{\cf2{}}{\cf11{())}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// next state is Wait{2}Pair}}}\par\pard
\cbpat1{{\cf2{				NextState}} {\cf11{=}} {\cf2{Wait{2}Pair}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"Dog Master SM -- Unpaired State -- Broadcast Received}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{HandleReq}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//start {1}s connection timer}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{ES_Timer_InitTimer}}{\cf2{}}{\cf11{(}}{\cf2{CONN_TIMER}}{\cf11{,}} {\cf2{CONNECTION_TIME}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			}\par\pard
\cbpat1{			{\cf13{break}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}			}\par\pard
\cbpat1{		{\cf5{// else if current state is Wait{2}Pair}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{case}} {\cf2{Wait{2}Pair}}{\cf11{:}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//printf("Dog Master SM -- Wait{2}Pair State -- Top\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//if event is Lost connection}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{if}}{\cf2{}}{\cf11{((}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_TIMEOUT}}{\cf11{) && (}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventParam}} {\cf11{==}} {\cf2{CONN_TIMER}}{\cf11{))}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"Dog Master SM -- Wait{2}Pair State -- Connection Lost}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// next state is Unpaired}}}\par\pard
\cbpat1{{\cf2{				NextState}} {\cf11{=}} {\cf2{Unpaired}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Clear the data array}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{ClearDataArray}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{// post entry event to self}}}\par\pard
\cbpat1{{\cf2{				ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_ENTRY}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostDogMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Post a lost connection event to the receive service}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_LOST_CONNECTION}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostDogRXSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			}\par\pard
\cbpat1{			{\cf5{// else if event is pair successful}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_MESSAGE_REC}} {\cf11{&&}} {\cf2{}}{\cf16{getHeader}}{\cf2{}}{\cf11{() ==}} {\cf2{ENCR_KEY}} {\cf11{&& (}}{\cf2{}}{\cf16{getDestFarmerAddressLSB}}{\cf2{}}{\cf11{() ==}} {\cf2{}}{\cf16{getLSBAddress}}{\cf2{}}{\cf11{() &&}} {\cf2{}}{\cf16{getDestFarmerAddressMSB}}{\cf2{}}{\cf11{() ==}} {\cf2{}}{\cf16{getMSBAddress}}{\cf2{}}{\cf11{()))}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"Dog Master SM -- Wait{2}Pair State -- Got Encryption Key}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//Store the Encryption Key}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{StoreEncr}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{// set LED active}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// Call LED setter}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// turn on electromechanical indicator}}}\par\pard
\cbpat1{{\cf2{				ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_PAIR_SUCCESSFUL}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostDiscoBallSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{// start lift fan				}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{sendToPIC}}{\cf2{}}{\cf11{(}}{\cf2{LIFT_FAN_ON}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{// next state is Paired}}}\par\pard
\cbpat1{{\cf2{				NextState}} {\cf11{=}} {\cf2{Paired}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Call setDogDataHeader with STATUS parameter}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{setDogDataHeader}}{\cf2{}}{\cf11{(}}{\cf2{STATUS}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Post transmit STATUS Event to TX_SM}}}\par\pard
\cbpat1{{\cf2{}\par\pard
\cbpat1{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_SEND_RESPONSE}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostDogTXSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//restart {1}s connection timer}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{ES_Timer_InitTimer}}{\cf2{}}{\cf11{(}}{\cf2{CONN_TIMER}}{\cf11{,}} {\cf2{CONNECTION_TIME}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			}\par\pard
\cbpat1{			{\cf13{break}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}			}\par\pard
\cbpat1{		{\cf5{// else if state is paired}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{case}} {\cf2{Paired}}{\cf11{:}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//printf("Dog Master SM -- Paired State -- Top\\r\\n");}}}\par\pard
\cbpat1{{\cf2{}}			{\cf5{//if event is Lost connection or timeout}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{if}}{\cf2{}}{\cf11{((}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_TIMEOUT}}{\cf11{) && (}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventParam}} {\cf11{==}} {\cf2{CONN_TIMER}}{\cf11{))}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"Dog Master SM -- Paired State -- Connection Lost}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{// turn thrust fan off}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{SetThrustFan}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf4{{1}{2}{7}}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{// clear LED active}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{// call LED setter}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{// set all brakes inactive}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{SetLeftBrakePosition}}{\cf2{}}{\cf11{(}}{\cf2{LEFT_SERVO_UP}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{SetRightBrakePosition}}{\cf2{}}{\cf11{(}}{\cf2{RIGHT_SERVO_UP}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{// call brake setter}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{// turn lift fan off}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{sendToPIC}}{\cf2{}}{\cf11{(}}{\cf2{LIFT_FAN_OFF}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{				PeripheralActive}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Clear the data array}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{ClearDataArray}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{// next state is Unpaired}}}\par\pard
\cbpat1{{\cf2{				NextState}} {\cf11{=}} {\cf2{Unpaired}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{// post entry event to self}}}\par\pard
\cbpat1{{\cf2{				ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_ENTRY}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostDogMasterSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{//Let the receive service know we have lost connection}}}\par\pard
\cbpat1{{\cf2{				NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_LOST_CONNECTION}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostDogRXSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}				}\par\pard
\cbpat1{				{\cf5{// stop electromechanical indicator}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{PostDiscoBallSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}			}\par\pard
\cbpat1{			{\cf5{//If event is ES_MESSAGE_REC and encryption is synchronized and same address	}}}\par\pard
\cbpat1{{\cf2{}}			{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{==}} {\cf2{ES_MESSAGE_REC}} {\cf11{&& (}}{\cf2{}}{\cf16{getDestFarmerAddressLSB}}{\cf2{}}{\cf11{() ==}} {\cf2{}}{\cf16{getLSBAddress}}{\cf2{}}{\cf11{() &&}} {\cf2{}}{\cf16{getDestFarmerAddressMSB}}{\cf2{}}{\cf11{() ==}} {\cf2{}}{\cf16{getMSBAddress}}{\cf2{}}{\cf11{()))}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{DecryptData}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}				{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf16{getHeader}}{\cf2{}}{\cf11{() ==}} {\cf2{CTRL}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}				{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{HandleCtrl}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}				{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}				{\cf13{else}}}\par\pard
\cbpat1{{\cf2{}}				{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"Dog Master SM -- Paired State -- Encryption Reset}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}					}\par\pard
\cbpat1{					{\cf5{//Send an ENCR_RESET mess to TX to send to farmer}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{setDogDataHeader}}{\cf2{}}{\cf11{(}}{\cf2{ENCR_RESET}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}					}\par\pard
\cbpat1{					{\cf5{//Reset Encryption}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{ResetEncr}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{					{\cf5{//Post transmit ENCR_RESET Event to TX_SM}}}\par\pard
\cbpat1{{\cf2{					ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{					NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_SEND_RESPONSE}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}					{\cf16{PostDogTXSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}					}\par\pard
\cbpat1{				{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}				{\cf5{//restart {1}s connection timer}}}\par\pard
\cbpat1{{\cf2{}}				{\cf16{ES_Timer_InitTimer}}{\cf2{}}{\cf11{(}}{\cf2{CONN_TIMER}}{\cf11{,}} {\cf2{CONNECTION_TIME}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}			{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{	CurrentState}} {\cf11{=}} {\cf2{NextState}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{return}} {\cf2{ReturnEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{HandleCtrl}}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{)\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"Dog Master SM -- Handle Control -- Top}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//TODO: Restart the {1} second timer}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Call setDogDataHeader with STATUS parameter}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{setDogDataHeader}}{\cf2{}}{\cf11{(}}{\cf2{STATUS}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//Post transmit STATUS Event to TX_SM}}}\par\pard
\cbpat1{{\cf2{	ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{	NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_SEND_RESPONSE}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{PostDogTXSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	}\par\pard
\cbpat1{	{\cf5{//set the thrust fan to the value that was sent over Xbee}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{SetThrustFan}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf16{getMoveData}}{\cf2{}}{\cf11{());}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{	{\cf5{//if TurnData is greater than {1}{2}{7}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf16{getBrakeData}}{\cf2{}}{\cf11{() >}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{//put down both servos}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{SetLeftBrakePosition}}{\cf2{}}{\cf11{(}}{\cf2{LEFT_SERVO_DOWN}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{SetRightBrakePosition}}{\cf2{}}{\cf11{(}}{\cf2{RIGHT_SERVO_DOWN}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf16{getTurnData}}{\cf2{}}{\cf11{() >}} {\cf2{LEFT_TURN_THRESHOLD}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{// TODO: Turn left servo on}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"Turn left Servo}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{// move right servo up}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{SetRightBrakePosition}}{\cf2{}}{\cf11{(}}{\cf2{RIGHT_SERVO_UP}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{// move left servo to brake position}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{SetLeftBrakePosition}}{\cf2{}}{\cf11{(}}{\cf2{LEFT_SERVO_DOWN}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	{\cf11{\}}}{\cf2{}}{\cf5{//elseif TurnData is less than {1}{2}{7}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{else if}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf16{getTurnData}}{\cf2{}}{\cf11{() <}} {\cf2{RIGHT_TURN_THRESHOLD}}{\cf11{)\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{// TODO: Turn right servo on}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"Turn right Servo}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{// move left servo up}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{SetLeftBrakePosition}}{\cf2{}}{\cf11{(}}{\cf2{LEFT_SERVO_UP}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{// move right servo to brake position}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{SetRightBrakePosition}}{\cf2{}}{\cf11{(}}{\cf2{RIGHT_SERVO_DOWN}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{else}} {\cf2{}}{\cf5{//we don't want to turn, so move both servos up}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{SetLeftBrakePosition}}{\cf2{}}{\cf11{(}}{\cf2{LEFT_SERVO_UP}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}		{\cf16{SetRightBrakePosition}}{\cf2{}}{\cf11{(}}{\cf2{RIGHT_SERVO_UP}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//if PerData is greater than {0}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{if}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf16{getPerData}}{\cf2{}}{\cf11{() >}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}		{\cf5{// TODO: Toggle peripheral functionality (lift fan maybe)}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{if}}{\cf2{}}{\cf11{(!}}{\cf2{PeripheralActive}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{			PeripheralActive}} {\cf11{=}} {\cf2{}}{\cf13{true}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}			{\cf16{sendToPIC}}{\cf2{}}{\cf11{(}}{\cf2{LIFT_FAN_OFF}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}			{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"Peripheral functionality Toggled ON}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}		{\cf13{else}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{			PeripheralActive}} {\cf11{=}} {\cf2{}}{\cf13{false}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}			{\cf16{sendToPIC}}{\cf2{}}{\cf11{(}}{\cf2{LIFT_FAN_ON}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}			{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"Peripheral functionality Toggled OFF}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}		{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}	{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{	}\par\pard
\cbpat1{	{\cf16{ClearDataArray}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{uint{8}_t}} {\cf2{}}{\cf16{getHardwareDogTag}}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{)\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//TODO: Determine which dog we are maybe using ADMulti}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//return DogSelect;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{return}} {\cf2{}}{\cf16{ReadDOGTag}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{static void}} {\cf2{}}{\cf16{HandleReq}}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{)\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{printf}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"Dog RX SM -- Handle Request -- Top}}{\cf7{\\r\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{//TODO: START ONE SECOND TIMER\\}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Set Destination address of Farmer}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{setDestFarmerAddress}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf16{getMSBAddress}}{\cf2{}}{\cf11{(),}}{\cf2{}}{\cf16{getLSBAddress}}{\cf2{}}{\cf11{());}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Call setDogDataHeader with PAIR_ACK parameter}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{setDogDataHeader}}{\cf2{}}{\cf11{(}}{\cf2{PAIR_ACK}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}	}\par\pard
\cbpat1{	{\cf5{//Post transmit PAIR_ACK Event to TX_SM}}}\par\pard
\cbpat1{{\cf2{	ES_Event NewEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{	NewEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{ES_SEND_RESPONSE}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{PostDogTXSM}}{\cf2{}}{\cf11{(}}{\cf2{NewEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}}
